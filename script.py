import hashlib
from datetime import datetime
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding, utils
from cryptography.hazmat.primitives.serialization import load_pem_private_key, load_pem_public_key
from cryptography.hazmat.primitives.serialization import Encoding, PrivateFormat, PublicFormat
from cryptography.hazmat.primitives.serialization import NoEncryption
from cryptography.hazmat.backends import default_backend
import base64

# --- –§—É–Ω–∫—Ü–∏—è: –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ XML ---
def sign_xml(xml_file_path, private_key_path, signature_output_path):
    # –ß—Ç–µ–Ω–∏–µ XML —Ñ–∞–π–ª–∞
    with open(xml_file_path, 'rb') as f:
        xml_data = f.read()

    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ö—ç—à–∞
    digest = hashlib.sha256(xml_data).digest()
    timestamp = datetime.now().isoformat()

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –∫–ª—é—á–∞
    with open(private_key_path, 'rb') as f:
        private_key = load_pem_private_key(
            f.read(),
            password=None,
            backend=default_backend()
        )

    # –ü–æ–¥–ø–∏—Å—å —Ö—ç—à–∞
    signature = private_key.sign(
        digest,
        padding.PKCS1v15(),
        utils.Prehashed(hashes.SHA256())
    )

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏, —Ö—ç—à–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏
    with open(signature_output_path, 'w') as f:
        f.write(f"timestamp={timestamp}\n")
        f.write(f"hash={base64.b64encode(digest).decode()}\n")
        f.write(f"signature={base64.b64encode(signature).decode()}\n")

    print("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω.")
    return digest, signature, timestamp

# --- –§—É–Ω–∫—Ü–∏—è: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ ---
def verify_xml(xml_file_path, signature_file_path, public_key_path):
    # –ß—Ç–µ–Ω–∏–µ XML
    with open(xml_file_path, 'rb') as f:
        xml_data = f.read()

    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ö—ç—à–∞
    current_hash = hashlib.sha256(xml_data).digest()

    # –ß—Ç–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏
    data = {}
    with open(signature_file_path, 'r') as f:
        for line in f:
            key, value = line.strip().split('=', 1)
            data[key] = value

    stored_hash = base64.b64decode(data['hash'])
    stored_signature = base64.b64decode(data['signature'])
    timestamp = data['timestamp']

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ö—ç—à–µ–π
    if current_hash != stored_hash:
        print("‚ùå –•—ç—à–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç ‚Äî –¥–æ–∫—É–º–µ–Ω—Ç –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω.")
        return False

    # –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∫–ª—é—á–∞
    with open(public_key_path, 'rb') as f:
        public_key = load_pem_public_key(
            f.read(),
            backend=default_backend()
        )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
    try:
        public_key.verify(
            stored_signature,
            stored_hash,
            padding.PKCS1v15(),
            utils.Prehashed(hashes.SHA256())
        )
        print(f"‚úÖ –ü–æ–¥–ø–∏—Å—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. –í—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∏: {timestamp}")
        return True
    except Exception as e:
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å: {e}")
        return False

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä—ã –∫–ª—é—á–µ–π RSA (–µ—Å–ª–∏ –Ω–µ—Ç) ---
def generate_rsa_keys(private_key_path='private_key.pem', public_key_path='public_key.pem'):
    from cryptography.hazmat.primitives.asymmetric import rsa

    private_key = rsa.generate_private_key(
        public_exponent=65537,
        key_size=2048,
        backend=default_backend()
    )
    public_key = private_key.public_key()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –∫–ª—é—á–∞
    with open(private_key_path, 'wb') as f:
        f.write(private_key.private_bytes(
            encoding=Encoding.PEM,
            format=PrivateFormat.TraditionalOpenSSL,
            encryption_algorithm=NoEncryption()
        ))

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∫–ª—é—á–∞
    with open(public_key_path, 'wb') as f:
        f.write(public_key.public_bytes(
            encoding=Encoding.PEM,
            format=PublicFormat.SubjectPublicKeyInfo
        ))

    print("üîë –ö–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="–ü–æ–¥–ø–∏—Å—å –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ XML –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
    subparsers = parser.add_subparsers(dest='command')

    # –ü–æ–¥–∫–æ–º–∞–Ω–¥–∞: sign
    sign_parser = subparsers.add_parser('sign', help='–ü–æ–¥–ø–∏—Å–∞—Ç—å XML')
    sign_parser.add_argument('--xml', required=True, help='–ü—É—Ç—å –∫ XML —Ñ–∞–π–ª—É')
    sign_parser.add_argument('--key', required=True, help='–ü—É—Ç—å –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–ª—é—á—É')
    sign_parser.add_argument('--output', required=True, help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏')

    # –ü–æ–¥–∫–æ–º–∞–Ω–¥–∞: verify
    verify_parser = subparsers.add_parser('verify', help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å—å')
    verify_parser.add_argument('--xml', required=True, help='–ü—É—Ç—å –∫ XML —Ñ–∞–π–ª—É')
    verify_parser.add_argument('--sig', required=True, help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø–æ–¥–ø–∏—Å–∏')
    verify_parser.add_argument('--key', required=True, help='–ü—É—Ç—å –∫ –æ—Ç–∫—Ä—ã—Ç–æ–º—É –∫–ª—é—á—É')

    # –ü–æ–¥–∫–æ–º–∞–Ω–¥–∞: generate-keys
    gen_parser = subparsers.add_parser('generate-keys', help='–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏')

    args = parser.parse_args()

    if args.command == 'sign':
        sign_xml(args.xml, args.key, args.output)
    elif args.command == 'verify':
        verify_xml(args.xml, args.sig, args.key)
    elif args.command == 'generate-keys':
        generate_rsa_keys()
    else:
        parser.print_help()
